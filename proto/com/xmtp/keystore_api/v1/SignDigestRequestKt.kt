// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: keystore_api/v1/keystore.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.keystore_api.v1;

@kotlin.jvm.JvmName("-initializesignDigestRequest")
public inline fun signDigestRequest(block: com.xmtp.keystore_api.v1.SignDigestRequestKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.SignDigestRequest =
  com.xmtp.keystore_api.v1.SignDigestRequestKt.Dsl._create(com.xmtp.keystore_api.v1.SignDigestRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * SignDigestRequest is used to sign a digest with either the identity key
 * or a prekey
 * ```
 *
 * Protobuf type `xmtp.keystore_api.v1.SignDigestRequest`
 */
public object SignDigestRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.keystore_api.v1.SignDigestRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.keystore_api.v1.SignDigestRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.keystore_api.v1.SignDigestRequest = _builder.build()

    /**
     * <code>bytes digest = 1 [json_name = "digest"];</code>
     */
    public var digest: com.google.protobuf.ByteString
      @JvmName("getDigest")
      get() = _builder.getDigest()
      @JvmName("setDigest")
      set(value) {
        _builder.setDigest(value)
      }
    /**
     * `bytes digest = 1 [json_name = "digest"];`
     */
    public fun clearDigest() {
      _builder.clearDigest()
    }

    /**
     * <code>bool identity_key = 2 [json_name = "identityKey"];</code>
     */
    public var identityKey: kotlin.Boolean
      @JvmName("getIdentityKey")
      get() = _builder.getIdentityKey()
      @JvmName("setIdentityKey")
      set(value) {
        _builder.setIdentityKey(value)
      }
    /**
     * `bool identity_key = 2 [json_name = "identityKey"];`
     */
    public fun clearIdentityKey() {
      _builder.clearIdentityKey()
    }
    /**
     * `bool identity_key = 2 [json_name = "identityKey"];`
     * @return Whether the identityKey field is set.
     */
    public fun hasIdentityKey(): kotlin.Boolean {
      return _builder.hasIdentityKey()
    }

    /**
     * <code>uint32 prekey_index = 3 [json_name = "prekeyIndex"];</code>
     */
    public var prekeyIndex: kotlin.Int
      @JvmName("getPrekeyIndex")
      get() = _builder.getPrekeyIndex()
      @JvmName("setPrekeyIndex")
      set(value) {
        _builder.setPrekeyIndex(value)
      }
    /**
     * `uint32 prekey_index = 3 [json_name = "prekeyIndex"];`
     */
    public fun clearPrekeyIndex() {
      _builder.clearPrekeyIndex()
    }
    /**
     * `uint32 prekey_index = 3 [json_name = "prekeyIndex"];`
     * @return Whether the prekeyIndex field is set.
     */
    public fun hasPrekeyIndex(): kotlin.Boolean {
      return _builder.hasPrekeyIndex()
    }
    public val signerCase: com.xmtp.keystore_api.v1.SignDigestRequest.SignerCase
      @JvmName("getSignerCase")
      get() = _builder.getSignerCase()

    public fun clearSigner() {
      _builder.clearSigner()
    }
  }
}
public inline fun com.xmtp.keystore_api.v1.SignDigestRequest.copy(block: com.xmtp.keystore_api.v1.SignDigestRequestKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.SignDigestRequest =
  com.xmtp.keystore_api.v1.SignDigestRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

