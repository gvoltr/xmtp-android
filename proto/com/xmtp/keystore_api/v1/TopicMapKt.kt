// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: keystore_api/v1/keystore.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.keystore_api.v1;

@kotlin.jvm.JvmName("-initializetopicMap")
public inline fun topicMap(block: com.xmtp.keystore_api.v1.TopicMapKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.TopicMap =
  com.xmtp.keystore_api.v1.TopicMapKt.Dsl._create(com.xmtp.keystore_api.v1.TopicMap.newBuilder()).apply { block() }._build()
/**
 * ```
 * A mapping of topics to their decrypted invitations
 * ```
 *
 * Protobuf type `xmtp.keystore_api.v1.TopicMap`
 */
public object TopicMapKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.keystore_api.v1.TopicMap.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.keystore_api.v1.TopicMap.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.keystore_api.v1.TopicMap = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TopicsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
     public val topics: com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getTopicsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getTopicsMap()
      )
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
    @JvmName("putTopics")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      .put(key: kotlin.String, value: com.xmtp.keystore_api.v1.TopicMap.TopicData) {
         _builder.putTopics(key, value)
       }
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setTopics")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      .set(key: kotlin.String, value: com.xmtp.keystore_api.v1.TopicMap.TopicData) {
         put(key, value)
       }
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeTopics")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      .remove(key: kotlin.String) {
         _builder.removeTopics(key)
       }
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllTopics")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData>) {
         _builder.putAllTopics(map)
       }
    /**
     * `map<string, .xmtp.keystore_api.v1.TopicMap.TopicData> topics = 1 [json_name = "topics"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearTopics")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, com.xmtp.keystore_api.v1.TopicMap.TopicData, TopicsProxy>
      .clear() {
         _builder.clearTopics()
       }
  }
  @kotlin.jvm.JvmName("-initializetopicData")
  public inline fun topicData(block: com.xmtp.keystore_api.v1.TopicMapKt.TopicDataKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.TopicMap.TopicData =
    com.xmtp.keystore_api.v1.TopicMapKt.TopicDataKt.Dsl._create(com.xmtp.keystore_api.v1.TopicMap.TopicData.newBuilder()).apply { block() }._build()
  /**
   * ```
   * TopicData wraps the invitation and the timestamp it was created
   * ```
   *
   * Protobuf type `xmtp.keystore_api.v1.TopicMap.TopicData`
   */
  public object TopicDataKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.xmtp.keystore_api.v1.TopicMap.TopicData.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.xmtp.keystore_api.v1.TopicMap.TopicData.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.xmtp.keystore_api.v1.TopicMap.TopicData = _builder.build()

      /**
       * `uint64 created_ns = 1 [json_name = "createdNs"];`
       */
      public var createdNs: kotlin.Long
        @JvmName("getCreatedNs")
        get() = _builder.getCreatedNs()
        @JvmName("setCreatedNs")
        set(value) {
          _builder.setCreatedNs(value)
        }
      /**
       * `uint64 created_ns = 1 [json_name = "createdNs"];`
       */
      public fun clearCreatedNs() {
        _builder.clearCreatedNs()
      }

      /**
       * `string peer_address = 2 [json_name = "peerAddress"];`
       */
      public var peerAddress: kotlin.String
        @JvmName("getPeerAddress")
        get() = _builder.getPeerAddress()
        @JvmName("setPeerAddress")
        set(value) {
          _builder.setPeerAddress(value)
        }
      /**
       * `string peer_address = 2 [json_name = "peerAddress"];`
       */
      public fun clearPeerAddress() {
        _builder.clearPeerAddress()
      }

      /**
       * `.xmtp.message_contents.InvitationV1 invitation = 3 [json_name = "invitation"];`
       */
      public var invitation: com.xmtp.message_contents.InvitationV1
        @JvmName("getInvitation")
        get() = _builder.getInvitation()
        @JvmName("setInvitation")
        set(value) {
          _builder.setInvitation(value)
        }
      /**
       * `.xmtp.message_contents.InvitationV1 invitation = 3 [json_name = "invitation"];`
       */
      public fun clearInvitation() {
        _builder.clearInvitation()
      }
      /**
       * `.xmtp.message_contents.InvitationV1 invitation = 3 [json_name = "invitation"];`
       * @return Whether the invitation field is set.
       */
      public fun hasInvitation(): kotlin.Boolean {
        return _builder.hasInvitation()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.keystore_api.v1.TopicMap.copy(block: com.xmtp.keystore_api.v1.TopicMapKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.TopicMap =
  com.xmtp.keystore_api.v1.TopicMapKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.keystore_api.v1.TopicMap.TopicData.copy(block: com.xmtp.keystore_api.v1.TopicMapKt.TopicDataKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.TopicMap.TopicData =
  com.xmtp.keystore_api.v1.TopicMapKt.TopicDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.keystore_api.v1.TopicMap.TopicDataOrBuilder.invitationOrNull: com.xmtp.message_contents.InvitationV1?
  get() = if (hasInvitation()) getInvitation() else null

