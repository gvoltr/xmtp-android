// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: keystore_api/v1/keystore.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.keystore_api.v1;

@kotlin.jvm.JvmName("-initializecreateInviteRequest")
public inline fun createInviteRequest(block: com.xmtp.keystore_api.v1.CreateInviteRequestKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.CreateInviteRequest =
  com.xmtp.keystore_api.v1.CreateInviteRequestKt.Dsl._create(com.xmtp.keystore_api.v1.CreateInviteRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * Request to create an invite payload, and store the topic keys in the Keystore
 * ```
 *
 * Protobuf type `xmtp.keystore_api.v1.CreateInviteRequest`
 */
public object CreateInviteRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.keystore_api.v1.CreateInviteRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.keystore_api.v1.CreateInviteRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.keystore_api.v1.CreateInviteRequest = _builder.build()

    /**
     * `.xmtp.message_contents.InvitationV1.Context context = 1 [json_name = "context"];`
     */
    public var context: com.xmtp.message_contents.InvitationV1.Context
      @JvmName("getContext")
      get() = _builder.getContext()
      @JvmName("setContext")
      set(value) {
        _builder.setContext(value)
      }
    /**
     * `.xmtp.message_contents.InvitationV1.Context context = 1 [json_name = "context"];`
     */
    public fun clearContext() {
      _builder.clearContext()
    }
    /**
     * `.xmtp.message_contents.InvitationV1.Context context = 1 [json_name = "context"];`
     * @return Whether the context field is set.
     */
    public fun hasContext(): kotlin.Boolean {
      return _builder.hasContext()
    }

    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle recipient = 2 [json_name = "recipient"];`
     */
    public var recipient: com.xmtp.message_contents.SignedPublicKeyBundle
      @JvmName("getRecipient")
      get() = _builder.getRecipient()
      @JvmName("setRecipient")
      set(value) {
        _builder.setRecipient(value)
      }
    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle recipient = 2 [json_name = "recipient"];`
     */
    public fun clearRecipient() {
      _builder.clearRecipient()
    }
    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle recipient = 2 [json_name = "recipient"];`
     * @return Whether the recipient field is set.
     */
    public fun hasRecipient(): kotlin.Boolean {
      return _builder.hasRecipient()
    }

    /**
     * `uint64 created_ns = 3 [json_name = "createdNs"];`
     */
    public var createdNs: kotlin.Long
      @JvmName("getCreatedNs")
      get() = _builder.getCreatedNs()
      @JvmName("setCreatedNs")
      set(value) {
        _builder.setCreatedNs(value)
      }
    /**
     * `uint64 created_ns = 3 [json_name = "createdNs"];`
     */
    public fun clearCreatedNs() {
      _builder.clearCreatedNs()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.keystore_api.v1.CreateInviteRequest.copy(block: com.xmtp.keystore_api.v1.CreateInviteRequestKt.Dsl.() -> kotlin.Unit): com.xmtp.keystore_api.v1.CreateInviteRequest =
  com.xmtp.keystore_api.v1.CreateInviteRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.keystore_api.v1.CreateInviteRequestOrBuilder.contextOrNull: com.xmtp.message_contents.InvitationV1.Context?
  get() = if (hasContext()) getContext() else null

public val com.xmtp.keystore_api.v1.CreateInviteRequestOrBuilder.recipientOrNull: com.xmtp.message_contents.SignedPublicKeyBundle?
  get() = if (hasRecipient()) getRecipient() else null

