// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/public_key.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializesignedPublicKey")
public inline fun signedPublicKey(block: com.xmtp.message_contents.SignedPublicKeyKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.SignedPublicKey =
  com.xmtp.message_contents.SignedPublicKeyKt.Dsl._create(com.xmtp.message_contents.SignedPublicKey.newBuilder()).apply { block() }._build()
/**
 * ```
 * SignedPublicKey 
 * ```
 *
 * Protobuf type `xmtp.message_contents.SignedPublicKey`
 */
public object SignedPublicKeyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.SignedPublicKey.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.SignedPublicKey.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.SignedPublicKey = _builder.build()

    /**
     * <pre>
     * embeds an UnsignedPublicKey
     * </pre>
     *
     * <code>bytes key_bytes = 1 [json_name = "keyBytes"];</code>
     */
    public var keyBytes: com.google.protobuf.ByteString
      @JvmName("getKeyBytes")
      get() = _builder.getKeyBytes()
      @JvmName("setKeyBytes")
      set(value) {
        _builder.setKeyBytes(value)
      }
    /**
     * ```
     * embeds an UnsignedPublicKey
     * ```
     *
     * `bytes key_bytes = 1 [json_name = "keyBytes"];`
     */
    public fun clearKeyBytes() {
      _builder.clearKeyBytes()
    }

    /**
     * ```
     * signs key_bytes
     * ```
     *
     * `.xmtp.message_contents.Signature signature = 2 [json_name = "signature"];`
     */
    public var signature: com.xmtp.message_contents.Signature
      @JvmName("getSignature")
      get() = _builder.getSignature()
      @JvmName("setSignature")
      set(value) {
        _builder.setSignature(value)
      }
    /**
     * ```
     * signs key_bytes
     * ```
     *
     * `.xmtp.message_contents.Signature signature = 2 [json_name = "signature"];`
     */
    public fun clearSignature() {
      _builder.clearSignature()
    }
    /**
     * ```
     * signs key_bytes
     * ```
     *
     * `.xmtp.message_contents.Signature signature = 2 [json_name = "signature"];`
     * @return Whether the signature field is set.
     */
    public fun hasSignature(): kotlin.Boolean {
      return _builder.hasSignature()
    }
  }
}
public inline fun com.xmtp.message_contents.SignedPublicKey.copy(block: com.xmtp.message_contents.SignedPublicKeyKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.SignedPublicKey =
  com.xmtp.message_contents.SignedPublicKeyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.SignedPublicKeyOrBuilder.signatureOrNull: com.xmtp.message_contents.Signature?
  get() = if (hasSignature()) getSignature() else null

