// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/message.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializemessageHeaderV1")
public inline fun messageHeaderV1(block: com.xmtp.message_contents.MessageHeaderV1Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.MessageHeaderV1 =
  com.xmtp.message_contents.MessageHeaderV1Kt.Dsl._create(com.xmtp.message_contents.MessageHeaderV1.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message header is encoded separately as the bytes are also used
 * as associated data for authenticated encryption
 * ```
 *
 * Protobuf type `xmtp.message_contents.MessageHeaderV1`
 */
public object MessageHeaderV1Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.MessageHeaderV1.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.MessageHeaderV1.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.MessageHeaderV1 = _builder.build()

    /**
     * `.xmtp.message_contents.PublicKeyBundle sender = 1 [json_name = "sender"];`
     */
    public var sender: com.xmtp.message_contents.PublicKeyBundle
      @JvmName("getSender")
      get() = _builder.getSender()
      @JvmName("setSender")
      set(value) {
        _builder.setSender(value)
      }
    /**
     * `.xmtp.message_contents.PublicKeyBundle sender = 1 [json_name = "sender"];`
     */
    public fun clearSender() {
      _builder.clearSender()
    }
    /**
     * `.xmtp.message_contents.PublicKeyBundle sender = 1 [json_name = "sender"];`
     * @return Whether the sender field is set.
     */
    public fun hasSender(): kotlin.Boolean {
      return _builder.hasSender()
    }

    /**
     * `.xmtp.message_contents.PublicKeyBundle recipient = 2 [json_name = "recipient"];`
     */
    public var recipient: com.xmtp.message_contents.PublicKeyBundle
      @JvmName("getRecipient")
      get() = _builder.getRecipient()
      @JvmName("setRecipient")
      set(value) {
        _builder.setRecipient(value)
      }
    /**
     * `.xmtp.message_contents.PublicKeyBundle recipient = 2 [json_name = "recipient"];`
     */
    public fun clearRecipient() {
      _builder.clearRecipient()
    }
    /**
     * `.xmtp.message_contents.PublicKeyBundle recipient = 2 [json_name = "recipient"];`
     * @return Whether the recipient field is set.
     */
    public fun hasRecipient(): kotlin.Boolean {
      return _builder.hasRecipient()
    }

    /**
     * <code>uint64 timestamp = 3 [json_name = "timestamp"];</code>
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * `uint64 timestamp = 3 [json_name = "timestamp"];`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
  }
}
public inline fun com.xmtp.message_contents.MessageHeaderV1.copy(block: com.xmtp.message_contents.MessageHeaderV1Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.MessageHeaderV1 =
  com.xmtp.message_contents.MessageHeaderV1Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.MessageHeaderV1OrBuilder.senderOrNull: com.xmtp.message_contents.PublicKeyBundle?
  get() = if (hasSender()) getSender() else null

public val com.xmtp.message_contents.MessageHeaderV1OrBuilder.recipientOrNull: com.xmtp.message_contents.PublicKeyBundle?
  get() = if (hasRecipient()) getRecipient() else null

