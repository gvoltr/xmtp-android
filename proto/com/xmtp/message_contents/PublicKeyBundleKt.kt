// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/public_key.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializepublicKeyBundle")
public inline fun publicKeyBundle(block: com.xmtp.message_contents.PublicKeyBundleKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.PublicKeyBundle =
  com.xmtp.message_contents.PublicKeyBundleKt.Dsl._create(com.xmtp.message_contents.PublicKeyBundle.newBuilder()).apply { block() }._build()
/**
 * ```
 * PublicKeyBundle packages the cryptographic keys associated with a wallet,
 * both senders and recipients are identified by their key bundles.
 * ```
 *
 * Protobuf type `xmtp.message_contents.PublicKeyBundle`
 */
public object PublicKeyBundleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.PublicKeyBundle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.PublicKeyBundle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.PublicKeyBundle = _builder.build()

    /**
     * ```
     * Identity key MUST be signed by the wallet.
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     */
    public var identityKey: com.xmtp.message_contents.PublicKey
      @JvmName("getIdentityKey")
      get() = _builder.getIdentityKey()
      @JvmName("setIdentityKey")
      set(value) {
        _builder.setIdentityKey(value)
      }
    /**
     * ```
     * Identity key MUST be signed by the wallet.
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     */
    public fun clearIdentityKey() {
      _builder.clearIdentityKey()
    }
    /**
     * ```
     * Identity key MUST be signed by the wallet.
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     * @return Whether the identityKey field is set.
     */
    public fun hasIdentityKey(): kotlin.Boolean {
      return _builder.hasIdentityKey()
    }

    /**
     * ```
     * Pre-key MUST be signed by the identity key.
     * ```
     *
     * `.xmtp.message_contents.PublicKey pre_key = 2 [json_name = "preKey"];`
     */
    public var preKey: com.xmtp.message_contents.PublicKey
      @JvmName("getPreKey")
      get() = _builder.getPreKey()
      @JvmName("setPreKey")
      set(value) {
        _builder.setPreKey(value)
      }
    /**
     * ```
     * Pre-key MUST be signed by the identity key.
     * ```
     *
     * `.xmtp.message_contents.PublicKey pre_key = 2 [json_name = "preKey"];`
     */
    public fun clearPreKey() {
      _builder.clearPreKey()
    }
    /**
     * ```
     * Pre-key MUST be signed by the identity key.
     * ```
     *
     * `.xmtp.message_contents.PublicKey pre_key = 2 [json_name = "preKey"];`
     * @return Whether the preKey field is set.
     */
    public fun hasPreKey(): kotlin.Boolean {
      return _builder.hasPreKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.PublicKeyBundle.copy(block: com.xmtp.message_contents.PublicKeyBundleKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.PublicKeyBundle =
  com.xmtp.message_contents.PublicKeyBundleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.PublicKeyBundleOrBuilder.identityKeyOrNull: com.xmtp.message_contents.PublicKey?
  get() = if (hasIdentityKey()) getIdentityKey() else null

public val com.xmtp.message_contents.PublicKeyBundleOrBuilder.preKeyOrNull: com.xmtp.message_contents.PublicKey?
  get() = if (hasPreKey()) getPreKey() else null

