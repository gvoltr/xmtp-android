// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/message.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializemessageV2")
public inline fun messageV2(block: com.xmtp.message_contents.MessageV2Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.MessageV2 =
  com.xmtp.message_contents.MessageV2Kt.Dsl._create(com.xmtp.message_contents.MessageV2.newBuilder()).apply { block() }._build()
/**
 * ```
 * Message combines the encoded header with the encrypted payload.
 * ```
 *
 * Protobuf type `xmtp.message_contents.MessageV2`
 */
public object MessageV2Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.MessageV2.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.MessageV2.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.MessageV2 = _builder.build()

    /**
     * ```
     * encapsulates encoded MessageHeaderV2
     * ```
     *
     * `bytes header_bytes = 1 [json_name = "headerBytes"];`
     */
    public var headerBytes: com.google.protobuf.ByteString
      @JvmName("getHeaderBytes")
      get() = _builder.getHeaderBytes()
      @JvmName("setHeaderBytes")
      set(value) {
        _builder.setHeaderBytes(value)
      }
    /**
     * ```
     * encapsulates encoded MessageHeaderV2
     * ```
     *
     * `bytes header_bytes = 1 [json_name = "headerBytes"];`
     */
    public fun clearHeaderBytes() {
      _builder.clearHeaderBytes()
    }

    /**
     * ```
     * Ciphertext.payload MUST contain encrypted SignedContent
     * ```
     *
     * `.xmtp.message_contents.Ciphertext ciphertext = 2 [json_name = "ciphertext"];`
     */
    public var ciphertext: com.xmtp.message_contents.Ciphertext
      @JvmName("getCiphertext")
      get() = _builder.getCiphertext()
      @JvmName("setCiphertext")
      set(value) {
        _builder.setCiphertext(value)
      }
    /**
     * ```
     * Ciphertext.payload MUST contain encrypted SignedContent
     * ```
     *
     * `.xmtp.message_contents.Ciphertext ciphertext = 2 [json_name = "ciphertext"];`
     */
    public fun clearCiphertext() {
      _builder.clearCiphertext()
    }
    /**
     * ```
     * Ciphertext.payload MUST contain encrypted SignedContent
     * ```
     *
     * `.xmtp.message_contents.Ciphertext ciphertext = 2 [json_name = "ciphertext"];`
     * @return Whether the ciphertext field is set.
     */
    public fun hasCiphertext(): kotlin.Boolean {
      return _builder.hasCiphertext()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.MessageV2.copy(block: com.xmtp.message_contents.MessageV2Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.MessageV2 =
  com.xmtp.message_contents.MessageV2Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.MessageV2OrBuilder.ciphertextOrNull: com.xmtp.message_contents.Ciphertext?
  get() = if (hasCiphertext()) getCiphertext() else null

