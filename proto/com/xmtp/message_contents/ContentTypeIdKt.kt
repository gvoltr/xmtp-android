// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/content.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializecontentTypeId")
public inline fun contentTypeId(block: com.xmtp.message_contents.ContentTypeIdKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.ContentTypeId =
  com.xmtp.message_contents.ContentTypeIdKt.Dsl._create(com.xmtp.message_contents.ContentTypeId.newBuilder()).apply { block() }._build()
/**
 * ```
 * ContentTypeId is used to identify the type of content stored in a Message.
 * ```
 *
 * Protobuf type `xmtp.message_contents.ContentTypeId`
 */
public object ContentTypeIdKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.ContentTypeId.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.ContentTypeId.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.ContentTypeId = _builder.build()

    /**
     * ```
     * authority governing this content type
     * ```
     *
     * `string authority_id = 1 [json_name = "authorityId"];`
     */
    public var authorityId: kotlin.String
      @JvmName("getAuthorityId")
      get() = _builder.getAuthorityId()
      @JvmName("setAuthorityId")
      set(value) {
        _builder.setAuthorityId(value)
      }
    /**
     * ```
     * authority governing this content type
     * ```
     *
     * `string authority_id = 1 [json_name = "authorityId"];`
     */
    public fun clearAuthorityId() {
      _builder.clearAuthorityId()
    }

    /**
     * ```
     * type identifier
     * ```
     *
     * `string type_id = 2 [json_name = "typeId"];`
     */
    public var typeId: kotlin.String
      @JvmName("getTypeId")
      get() = _builder.getTypeId()
      @JvmName("setTypeId")
      set(value) {
        _builder.setTypeId(value)
      }
    /**
     * ```
     * type identifier
     * ```
     *
     * `string type_id = 2 [json_name = "typeId"];`
     */
    public fun clearTypeId() {
      _builder.clearTypeId()
    }

    /**
     * <pre>
     * major version of the type
     * </pre>
     *
     * <code>uint32 version_major = 3 [json_name = "versionMajor"];</code>
     */
    public var versionMajor: kotlin.Int
      @JvmName("getVersionMajor")
      get() = _builder.getVersionMajor()
      @JvmName("setVersionMajor")
      set(value) {
        _builder.setVersionMajor(value)
      }
    /**
     * ```
     * major version of the type
     * ```
     *
     * `uint32 version_major = 3 [json_name = "versionMajor"];`
     */
    public fun clearVersionMajor() {
      _builder.clearVersionMajor()
    }

    /**
     * <pre>
     * minor version of the type
     * </pre>
     *
     * <code>uint32 version_minor = 4 [json_name = "versionMinor"];</code>
     */
    public var versionMinor: kotlin.Int
      @JvmName("getVersionMinor")
      get() = _builder.getVersionMinor()
      @JvmName("setVersionMinor")
      set(value) {
        _builder.setVersionMinor(value)
      }
    /**
     * ```
     * minor version of the type
     * ```
     *
     * `uint32 version_minor = 4 [json_name = "versionMinor"];`
     */
    public fun clearVersionMinor() {
      _builder.clearVersionMinor()
    }
  }
}
public inline fun com.xmtp.message_contents.ContentTypeId.copy(block: com.xmtp.message_contents.ContentTypeIdKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.ContentTypeId =
  com.xmtp.message_contents.ContentTypeIdKt.Dsl._create(this.toBuilder()).apply { block() }._build()

