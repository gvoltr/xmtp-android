// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/signature.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializesignature")
public inline fun signature(block: com.xmtp.message_contents.SignatureKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature =
  com.xmtp.message_contents.SignatureKt.Dsl._create(com.xmtp.message_contents.Signature.newBuilder()).apply { block() }._build()
/**
 * ```
 * Signature represents a generalized public key signature,
 * defined as a union to support cryptographic algorithm agility.
 * ```
 *
 * Protobuf type `xmtp.message_contents.Signature`
 */
public object SignatureKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.Signature.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.Signature.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.Signature = _builder.build()

    /**
     * `.xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1 [json_name = "ecdsaCompact"];`
     */
    public var ecdsaCompact: com.xmtp.message_contents.Signature.ECDSACompact
      @JvmName("getEcdsaCompact")
      get() = _builder.getEcdsaCompact()
      @JvmName("setEcdsaCompact")
      set(value) {
        _builder.setEcdsaCompact(value)
      }
    /**
     * `.xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1 [json_name = "ecdsaCompact"];`
     */
    public fun clearEcdsaCompact() {
      _builder.clearEcdsaCompact()
    }
    /**
     * `.xmtp.message_contents.Signature.ECDSACompact ecdsa_compact = 1 [json_name = "ecdsaCompact"];`
     * @return Whether the ecdsaCompact field is set.
     */
    public fun hasEcdsaCompact(): kotlin.Boolean {
      return _builder.hasEcdsaCompact()
    }

    /**
     * `.xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2 [json_name = "walletEcdsaCompact"];`
     */
    public var walletEcdsaCompact: com.xmtp.message_contents.Signature.WalletECDSACompact
      @JvmName("getWalletEcdsaCompact")
      get() = _builder.getWalletEcdsaCompact()
      @JvmName("setWalletEcdsaCompact")
      set(value) {
        _builder.setWalletEcdsaCompact(value)
      }
    /**
     * `.xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2 [json_name = "walletEcdsaCompact"];`
     */
    public fun clearWalletEcdsaCompact() {
      _builder.clearWalletEcdsaCompact()
    }
    /**
     * `.xmtp.message_contents.Signature.WalletECDSACompact wallet_ecdsa_compact = 2 [json_name = "walletEcdsaCompact"];`
     * @return Whether the walletEcdsaCompact field is set.
     */
    public fun hasWalletEcdsaCompact(): kotlin.Boolean {
      return _builder.hasWalletEcdsaCompact()
    }
    public val unionCase: com.xmtp.message_contents.Signature.UnionCase
      @JvmName("getUnionCase")
      get() = _builder.getUnionCase()

    public fun clearUnion() {
      _builder.clearUnion()
    }
  }
  @kotlin.jvm.JvmName("-initializeeCDSACompact")
  public inline fun eCDSACompact(block: com.xmtp.message_contents.SignatureKt.ECDSACompactKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature.ECDSACompact =
    com.xmtp.message_contents.SignatureKt.ECDSACompactKt.Dsl._create(com.xmtp.message_contents.Signature.ECDSACompact.newBuilder()).apply { block() }._build()
  /**
   * ```
   * ECDSA signature bytes and the recovery bit
   * ```
   *
   * Protobuf type `xmtp.message_contents.Signature.ECDSACompact`
   */
  public object ECDSACompactKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.xmtp.message_contents.Signature.ECDSACompact.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.xmtp.message_contents.Signature.ECDSACompact.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.xmtp.message_contents.Signature.ECDSACompact = _builder.build()

      /**
       * ```
       * compact representation [ R || S ], 64 bytes
       * ```
       *
       * `bytes bytes = 1 [json_name = "bytes"];`
       */
      public var bytes: com.google.protobuf.ByteString
        @JvmName("getBytes")
        get() = _builder.getBytes()
        @JvmName("setBytes")
        set(value) {
          _builder.setBytes(value)
        }
      /**
       * ```
       * compact representation [ R || S ], 64 bytes
       * ```
       *
       * `bytes bytes = 1 [json_name = "bytes"];`
       */
      public fun clearBytes() {
        _builder.clearBytes()
      }

      /**
       * ```
       * recovery bit
       * ```
       *
       * `uint32 recovery = 2 [json_name = "recovery"];`
       */
      public var recovery: kotlin.Int
        @JvmName("getRecovery")
        get() = _builder.getRecovery()
        @JvmName("setRecovery")
        set(value) {
          _builder.setRecovery(value)
        }
      /**
       * ```
       * recovery bit
       * ```
       *
       * `uint32 recovery = 2 [json_name = "recovery"];`
       */
      public fun clearRecovery() {
        _builder.clearRecovery()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializewalletECDSACompact")
  public inline fun walletECDSACompact(block: com.xmtp.message_contents.SignatureKt.WalletECDSACompactKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature.WalletECDSACompact =
    com.xmtp.message_contents.SignatureKt.WalletECDSACompactKt.Dsl._create(com.xmtp.message_contents.Signature.WalletECDSACompact.newBuilder()).apply { block() }._build()
  /**
   * ```
   * ECDSA signature bytes and the recovery bit
   * produced by xmtp-js::PublicKey.signWithWallet function, i.e.
   * EIP-191 signature of a "Create Identity" message with the key embedded.
   * Used to sign identity keys.
   * ```
   *
   * Protobuf type `xmtp.message_contents.Signature.WalletECDSACompact`
   */
  public object WalletECDSACompactKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: com.xmtp.message_contents.Signature.WalletECDSACompact.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: com.xmtp.message_contents.Signature.WalletECDSACompact.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): com.xmtp.message_contents.Signature.WalletECDSACompact = _builder.build()

      /**
       * ```
       * compact representation [ R || S ], 64 bytes
       * ```
       *
       * `bytes bytes = 1 [json_name = "bytes"];`
       */
      public var bytes: com.google.protobuf.ByteString
        @JvmName("getBytes")
        get() = _builder.getBytes()
        @JvmName("setBytes")
        set(value) {
          _builder.setBytes(value)
        }
      /**
       * ```
       * compact representation [ R || S ], 64 bytes
       * ```
       *
       * `bytes bytes = 1 [json_name = "bytes"];`
       */
      public fun clearBytes() {
        _builder.clearBytes()
      }

      /**
       * ```
       * recovery bit
       * ```
       *
       * `uint32 recovery = 2 [json_name = "recovery"];`
       */
      public var recovery: kotlin.Int
        @JvmName("getRecovery")
        get() = _builder.getRecovery()
        @JvmName("setRecovery")
        set(value) {
          _builder.setRecovery(value)
        }
      /**
       * ```
       * recovery bit
       * ```
       *
       * `uint32 recovery = 2 [json_name = "recovery"];`
       */
      public fun clearRecovery() {
        _builder.clearRecovery()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.Signature.copy(block: com.xmtp.message_contents.SignatureKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature =
  com.xmtp.message_contents.SignatureKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.Signature.ECDSACompact.copy(block: com.xmtp.message_contents.SignatureKt.ECDSACompactKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature.ECDSACompact =
  com.xmtp.message_contents.SignatureKt.ECDSACompactKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.Signature.WalletECDSACompact.copy(block: com.xmtp.message_contents.SignatureKt.WalletECDSACompactKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Signature.WalletECDSACompact =
  com.xmtp.message_contents.SignatureKt.WalletECDSACompactKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.SignatureOrBuilder.ecdsaCompactOrNull: com.xmtp.message_contents.Signature.ECDSACompact?
  get() = if (hasEcdsaCompact()) getEcdsaCompact() else null

public val com.xmtp.message_contents.SignatureOrBuilder.walletEcdsaCompactOrNull: com.xmtp.message_contents.Signature.WalletECDSACompact?
  get() = if (hasWalletEcdsaCompact()) getWalletEcdsaCompact() else null

