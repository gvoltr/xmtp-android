// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/contact.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializecontactBundleV2")
public inline fun contactBundleV2(block: com.xmtp.message_contents.ContactBundleV2Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.ContactBundleV2 =
  com.xmtp.message_contents.ContactBundleV2Kt.Dsl._create(com.xmtp.message_contents.ContactBundleV2.newBuilder()).apply { block() }._build()
/**
 * ```
 * User key bundle V2 using SignedPublicKeys.
 * ```
 *
 * Protobuf type `xmtp.message_contents.ContactBundleV2`
 */
public object ContactBundleV2Kt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.ContactBundleV2.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.ContactBundleV2.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.ContactBundleV2 = _builder.build()

    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle key_bundle = 1 [json_name = "keyBundle"];`
     */
    public var keyBundle: com.xmtp.message_contents.SignedPublicKeyBundle
      @JvmName("getKeyBundle")
      get() = _builder.getKeyBundle()
      @JvmName("setKeyBundle")
      set(value) {
        _builder.setKeyBundle(value)
      }
    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle key_bundle = 1 [json_name = "keyBundle"];`
     */
    public fun clearKeyBundle() {
      _builder.clearKeyBundle()
    }
    /**
     * `.xmtp.message_contents.SignedPublicKeyBundle key_bundle = 1 [json_name = "keyBundle"];`
     * @return Whether the keyBundle field is set.
     */
    public fun hasKeyBundle(): kotlin.Boolean {
      return _builder.hasKeyBundle()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.ContactBundleV2.copy(block: com.xmtp.message_contents.ContactBundleV2Kt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.ContactBundleV2 =
  com.xmtp.message_contents.ContactBundleV2Kt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.ContactBundleV2OrBuilder.keyBundleOrNull: com.xmtp.message_contents.SignedPublicKeyBundle?
  get() = if (hasKeyBundle()) getKeyBundle() else null

