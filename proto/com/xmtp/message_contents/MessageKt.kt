// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/message.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializemessage")
public inline fun message(block: com.xmtp.message_contents.MessageKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Message =
  com.xmtp.message_contents.MessageKt.Dsl._create(com.xmtp.message_contents.Message.newBuilder()).apply { block() }._build()
/**
 * ```
 * Versioned Message
 * ```
 *
 * Protobuf type `xmtp.message_contents.Message`
 */
public object MessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.Message.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.Message.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.Message = _builder.build()

    /**
     * `.xmtp.message_contents.MessageV1 v1 = 1 [json_name = "v1"];`
     */
    public var v1: com.xmtp.message_contents.MessageV1
      @JvmName("getV1")
      get() = _builder.getV1()
      @JvmName("setV1")
      set(value) {
        _builder.setV1(value)
      }
    /**
     * `.xmtp.message_contents.MessageV1 v1 = 1 [json_name = "v1"];`
     */
    public fun clearV1() {
      _builder.clearV1()
    }
    /**
     * `.xmtp.message_contents.MessageV1 v1 = 1 [json_name = "v1"];`
     * @return Whether the v1 field is set.
     */
    public fun hasV1(): kotlin.Boolean {
      return _builder.hasV1()
    }

    /**
     * `.xmtp.message_contents.MessageV2 v2 = 2 [json_name = "v2"];`
     */
    public var v2: com.xmtp.message_contents.MessageV2
      @JvmName("getV2")
      get() = _builder.getV2()
      @JvmName("setV2")
      set(value) {
        _builder.setV2(value)
      }
    /**
     * `.xmtp.message_contents.MessageV2 v2 = 2 [json_name = "v2"];`
     */
    public fun clearV2() {
      _builder.clearV2()
    }
    /**
     * `.xmtp.message_contents.MessageV2 v2 = 2 [json_name = "v2"];`
     * @return Whether the v2 field is set.
     */
    public fun hasV2(): kotlin.Boolean {
      return _builder.hasV2()
    }
    public val versionCase: com.xmtp.message_contents.Message.VersionCase
      @JvmName("getVersionCase")
      get() = _builder.getVersionCase()

    public fun clearVersion() {
      _builder.clearVersion()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.xmtp.message_contents.Message.copy(block: com.xmtp.message_contents.MessageKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.Message =
  com.xmtp.message_contents.MessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.MessageOrBuilder.v1OrNull: com.xmtp.message_contents.MessageV1?
  get() = if (hasV1()) getV1() else null

public val com.xmtp.message_contents.MessageOrBuilder.v2OrNull: com.xmtp.message_contents.MessageV2?
  get() = if (hasV2()) getV2() else null

