// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_contents/content.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_contents;

@kotlin.jvm.JvmName("-initializeencodedContent")
public inline fun encodedContent(block: com.xmtp.message_contents.EncodedContentKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.EncodedContent =
  com.xmtp.message_contents.EncodedContentKt.Dsl._create(com.xmtp.message_contents.EncodedContent.newBuilder()).apply { block() }._build()
/**
 * ```
 * EncodedContent bundles the content with metadata identifying its type
 * and parameters required for correct decoding and presentation of the content.
 * ```
 *
 * Protobuf type `xmtp.message_contents.EncodedContent`
 */
public object EncodedContentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_contents.EncodedContent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_contents.EncodedContent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_contents.EncodedContent = _builder.build()

    /**
     * ```
     * content type identifier used to match the payload with
     * the correct decoding machinery
     * ```
     *
     * `.xmtp.message_contents.ContentTypeId type = 1 [json_name = "type"];`
     */
    public var type: com.xmtp.message_contents.ContentTypeId
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * ```
     * content type identifier used to match the payload with
     * the correct decoding machinery
     * ```
     *
     * `.xmtp.message_contents.ContentTypeId type = 1 [json_name = "type"];`
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * ```
     * content type identifier used to match the payload with
     * the correct decoding machinery
     * ```
     *
     * `.xmtp.message_contents.ContentTypeId type = 1 [json_name = "type"];`
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ParametersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
     public val parameters: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getParametersMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getParametersMap()
      )
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
    @JvmName("putParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putParameters(key, value)
       }
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setParameters")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .remove(key: kotlin.String) {
         _builder.removeParameters(key)
       }
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllParameters(map)
       }
    /**
     * ```
     * optional encoding parameters required to correctly decode the content
     * ```
     *
     * `map<string, string> parameters = 2 [json_name = "parameters"];`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ParametersProxy>
      .clear() {
         _builder.clearParameters()
       }

    /**
     * ```
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     * ```
     *
     * `optional string fallback = 3 [json_name = "fallback"];`
     */
    public var fallback: kotlin.String
      @JvmName("getFallback")
      get() = _builder.getFallback()
      @JvmName("setFallback")
      set(value) {
        _builder.setFallback(value)
      }
    /**
     * ```
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     * ```
     *
     * `optional string fallback = 3 [json_name = "fallback"];`
     */
    public fun clearFallback() {
      _builder.clearFallback()
    }
    /**
     * ```
     * optional fallback description of the content that can be used in case
     * the client cannot decode or render the content
     * ```
     *
     * `optional string fallback = 3 [json_name = "fallback"];`
     * @return Whether the fallback field is set.
     */
    public fun hasFallback(): kotlin.Boolean {
      return _builder.hasFallback()
    }

    /**
     * ```
     * optional compression; the value indicates algorithm used to
     * compress the encoded content bytes
     * ```
     *
     * `optional .xmtp.message_contents.Compression compression = 5 [json_name = "compression"];`
     */
    public var compression: com.xmtp.message_contents.Compression
      @JvmName("getCompression")
      get() = _builder.getCompression()
      @JvmName("setCompression")
      set(value) {
        _builder.setCompression(value)
      }
    public var compressionValue: kotlin.Int
      @JvmName("getCompressionValue")
      get() = _builder.getCompressionValue()
      @JvmName("setCompressionValue")
      set(value) {
        _builder.setCompressionValue(value)
      }
    /**
     * ```
     * optional compression; the value indicates algorithm used to
     * compress the encoded content bytes
     * ```
     *
     * `optional .xmtp.message_contents.Compression compression = 5 [json_name = "compression"];`
     */
    public fun clearCompression() {
      _builder.clearCompression()
    }
    /**
     * ```
     * optional compression; the value indicates algorithm used to
     * compress the encoded content bytes
     * ```
     *
     * `optional .xmtp.message_contents.Compression compression = 5 [json_name = "compression"];`
     * @return Whether the compression field is set.
     */
    public fun hasCompression(): kotlin.Boolean {
      return _builder.hasCompression()
    }

    /**
     * <pre>
     * encoded content itself
     * </pre>
     *
     * <code>bytes content = 4 [json_name = "content"];</code>
     */
    public var content: com.google.protobuf.ByteString
      @JvmName("getContent")
      get() = _builder.getContent()
      @JvmName("setContent")
      set(value) {
        _builder.setContent(value)
      }
    /**
     * ```
     * encoded content itself
     * ```
     *
     * `bytes content = 4 [json_name = "content"];`
     */
    public fun clearContent() {
      _builder.clearContent()
    }
  }
}
public inline fun com.xmtp.message_contents.EncodedContent.copy(block: com.xmtp.message_contents.EncodedContentKt.Dsl.() -> kotlin.Unit): com.xmtp.message_contents.EncodedContent =
  com.xmtp.message_contents.EncodedContentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_contents.EncodedContentOrBuilder.typeOrNull: com.xmtp.message_contents.ContentTypeId?
  get() = if (hasType()) getType() else null

