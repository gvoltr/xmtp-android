// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_api/v1/authn.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_api.v1;

@kotlin.jvm.JvmName("-initializetoken")
public inline fun token(block: com.xmtp.message_api.v1.TokenKt.Dsl.() -> kotlin.Unit): com.xmtp.message_api.v1.Token =
  com.xmtp.message_api.v1.TokenKt.Dsl._create(com.xmtp.message_api.v1.Token.newBuilder()).apply { block() }._build()
/**
 * ```
 * Token is used by clients to prove to the nodes
 * that they are serving a specific wallet.
 * ```
 *
 * Protobuf type `xmtp.message_api.v1.Token`
 */
public object TokenKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_api.v1.Token.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_api.v1.Token.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_api.v1.Token = _builder.build()

    /**
     * ```
     * identity key signed by a wallet
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     */
    public var identityKey: com.xmtp.message_contents.PublicKey
      @JvmName("getIdentityKey")
      get() = _builder.getIdentityKey()
      @JvmName("setIdentityKey")
      set(value) {
        _builder.setIdentityKey(value)
      }
    /**
     * ```
     * identity key signed by a wallet
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     */
    public fun clearIdentityKey() {
      _builder.clearIdentityKey()
    }
    /**
     * ```
     * identity key signed by a wallet
     * ```
     *
     * `.xmtp.message_contents.PublicKey identity_key = 1 [json_name = "identityKey"];`
     * @return Whether the identityKey field is set.
     */
    public fun hasIdentityKey(): kotlin.Boolean {
      return _builder.hasIdentityKey()
    }

    /**
     * <pre>
     * encoded bytes of AuthData
     * </pre>
     *
     * <code>bytes auth_data_bytes = 2 [json_name = "authDataBytes"];</code>
     */
    public var authDataBytes: com.google.protobuf.ByteString
      @JvmName("getAuthDataBytes")
      get() = _builder.getAuthDataBytes()
      @JvmName("setAuthDataBytes")
      set(value) {
        _builder.setAuthDataBytes(value)
      }
    /**
     * ```
     * encoded bytes of AuthData
     * ```
     *
     * `bytes auth_data_bytes = 2 [json_name = "authDataBytes"];`
     */
    public fun clearAuthDataBytes() {
      _builder.clearAuthDataBytes()
    }

    /**
     * ```
     * identity key signature of AuthData bytes
     * ```
     *
     * `.xmtp.message_contents.Signature auth_data_signature = 3 [json_name = "authDataSignature"];`
     */
    public var authDataSignature: com.xmtp.message_contents.Signature
      @JvmName("getAuthDataSignature")
      get() = _builder.getAuthDataSignature()
      @JvmName("setAuthDataSignature")
      set(value) {
        _builder.setAuthDataSignature(value)
      }
    /**
     * ```
     * identity key signature of AuthData bytes
     * ```
     *
     * `.xmtp.message_contents.Signature auth_data_signature = 3 [json_name = "authDataSignature"];`
     */
    public fun clearAuthDataSignature() {
      _builder.clearAuthDataSignature()
    }
    /**
     * ```
     * identity key signature of AuthData bytes
     * ```
     *
     * `.xmtp.message_contents.Signature auth_data_signature = 3 [json_name = "authDataSignature"];`
     * @return Whether the authDataSignature field is set.
     */
    public fun hasAuthDataSignature(): kotlin.Boolean {
      return _builder.hasAuthDataSignature()
    }
  }
}
public inline fun com.xmtp.message_api.v1.Token.copy(block: com.xmtp.message_api.v1.TokenKt.Dsl.() -> kotlin.Unit): com.xmtp.message_api.v1.Token =
  com.xmtp.message_api.v1.TokenKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.xmtp.message_api.v1.TokenOrBuilder.identityKeyOrNull: com.xmtp.message_contents.PublicKey?
  get() = if (hasIdentityKey()) getIdentityKey() else null

public val com.xmtp.message_api.v1.TokenOrBuilder.authDataSignatureOrNull: com.xmtp.message_contents.Signature?
  get() = if (hasAuthDataSignature()) getAuthDataSignature() else null

