// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message_api/v1/message_api.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.xmtp.message_api.v1;

@kotlin.jvm.JvmName("-initializeenvelope")
public inline fun envelope(block: com.xmtp.message_api.v1.EnvelopeKt.Dsl.() -> kotlin.Unit): com.xmtp.message_api.v1.Envelope =
  com.xmtp.message_api.v1.EnvelopeKt.Dsl._create(com.xmtp.message_api.v1.Envelope.newBuilder()).apply { block() }._build()
/**
 * ```
 * Envelope encapsulates a message while in transit.
 * ```
 *
 * Protobuf type `xmtp.message_api.v1.Envelope`
 */
public object EnvelopeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.xmtp.message_api.v1.Envelope.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.xmtp.message_api.v1.Envelope.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.xmtp.message_api.v1.Envelope = _builder.build()

    /**
     * ```
     * The topic the message belongs to,
     * If the message includes the topic as well
     * it MUST be the same as the topic in the envelope.
     * ```
     *
     * `string content_topic = 1 [json_name = "contentTopic"];`
     */
    public var contentTopic: kotlin.String
      @JvmName("getContentTopic")
      get() = _builder.getContentTopic()
      @JvmName("setContentTopic")
      set(value) {
        _builder.setContentTopic(value)
      }
    /**
     * ```
     * The topic the message belongs to,
     * If the message includes the topic as well
     * it MUST be the same as the topic in the envelope.
     * ```
     *
     * `string content_topic = 1 [json_name = "contentTopic"];`
     */
    public fun clearContentTopic() {
      _builder.clearContentTopic()
    }

    /**
     * <pre>
     * Message creation timestamp
     * If the message includes the timestamp as well
     * it MUST be equivalent to the timestamp in the envelope.
     * </pre>
     *
     * <code>uint64 timestamp_ns = 2 [json_name = "timestampNs"];</code>
     */
    public var timestampNs: kotlin.Long
      @JvmName("getTimestampNs")
      get() = _builder.getTimestampNs()
      @JvmName("setTimestampNs")
      set(value) {
        _builder.setTimestampNs(value)
      }
    /**
     * ```
     * Message creation timestamp
     * If the message includes the timestamp as well
     * it MUST be equivalent to the timestamp in the envelope.
     * ```
     *
     * `uint64 timestamp_ns = 2 [json_name = "timestampNs"];`
     */
    public fun clearTimestampNs() {
      _builder.clearTimestampNs()
    }

    /**
     * <code>bytes message = 3 [json_name = "message"];</code>
     */
    public var message: com.google.protobuf.ByteString
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * `bytes message = 3 [json_name = "message"];`
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
public inline fun com.xmtp.message_api.v1.Envelope.copy(block: com.xmtp.message_api.v1.EnvelopeKt.Dsl.() -> kotlin.Unit): com.xmtp.message_api.v1.Envelope =
  com.xmtp.message_api.v1.EnvelopeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

